#!/bin/bash
# Creating a Certificate Authority public key
ipsec pki --self --ca --lifetime 3650 --in ~/pki/private/ca-key.pem --type rsa --dn "CN=VPN root CA" --outform pem > ~/pki/cacerts/ca-cert.pem
ipsec pki --self --ca --lifetime 3650 --in ~/pki/private/ca-key.pem --type ecdsa --digest sha512 --dn "CN=VPN root CA" --outform pem > ~/pki/cacerts/ca-cert.pem

# Generating a VPN Server public key
ipsec pki --pub --in ~/pki/private/server-key.pem --type rsa | ipsec pki --issue --lifetime 1825 --cacert ~/pki/cacerts/ca-cert.pem --cakey ~/pki/private/ca-key.pem --dn "CN=server_domain_or_IP" --san "server_domain_or_IP" --flag serverAuth --flag ikeIntermediate --outform pem > ~/pki/certs/server-cert.pem

# Generating a VPN client public key (SAN must consistent with rightid in ipsec.conf)
ipsec pki --pub --in ~/pki/private/client-key.pem --type rsa | ipsec pki --issue --lifetime 1825 --cacert ~/pki/cacerts/ca-cert.pem --cakey ~/pki/private/ca-key.pem --dn "CN=client CN" --san "client_name" --flag clientAuth --flag ikeIntermediate --outform pem > ~/pki/certs/client-cert.pem
ipsec pki --pub --in ~/pki/private/client-key.pem --type ecdsa | ipsec pki --issue --digest sha512 --lifetime 1825 --cacert ~/pki/cacerts/ca-cert.pem --cakey ~/pki/private/ca-key.pem --dn "CN=client CN" --san "client_name" --flag clientAuth --flag ikeIntermediate --outform pem > ~/pki/certs/client-cert.pem

# Generating a public key in the manner of pkcs10 (network transferring)
ipsec pki --issue --type pkcs10 --in ~/pki/certs/gateway-req.pem --lifetime 1825 --cacert ~/pki/cacerts/ca-cert.pem --cakey ~/pki/private/ca-key.pem --flag serverAuth --flag ikeIntermediate --outform pem > ~/pki/certs/gateway-cert.pem

# Generating a p12 public key for iOS
openssl pkcs12 -export -inkey ~/pki/private/client-key.pem -in ~/pki/certs/client-cert.pem -name "VPN client p12" -certfile ~/pki/cacerts/ca-cert.pem -caname "VPN root CA" -out ~/pki/certs/client-cert.p12
